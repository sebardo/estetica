<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\NoResultException;
/**
 * ClientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientRepository extends EntityRepository  implements UserLoaderInterface
{
    
    public function loadUserByUsername($username)
    {
        //fix to replate space for +
        $username = str_replace(' ', '+', $username);
        
        $q = $this
            ->createQueryBuilder('u')
            ->select('u')
            ->where('u.username = :username')
            ->andWhere('u.active = TRUE')
            ->setParameter('username', $username)
            ->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            
            
            $message = sprintf(
                'Unable to find an active admin CoreBundle:Actor object identified by "%s".',
                $username
            );
            throw new UsernameNotFoundException($message, 0, $e);
        }

        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        return $this->find($user->getId());
    }

    public function supportsClass($class)
    {
        return $this->getEntityName() === $class
            || is_subclass_of($class, $this->getEntityName());
    }
    
    /**
     * Find all rows filtered for DataTables
     *
     * @param string $search        The search string
     * @param int    $sortColumn    The column to sort by
     * @param string $sortDirection The direction to sort the column
     * @param int    $entityId      The id related 
     *
     * @return \Doctrine\ORM\Query
     */
    public function findAllForDataTables($search, $sortColumn, $sortDirection, $support=null, $category=null, $subcategory=null)
    {
        // select
        $qb = $this->getQueryBuilder()
            ->select('c.id, c.username, c.tradeName, c.code, c.createdAt created, c.active');

        // join
//        $qb->leftJoin('c.client', 'cli')
//           ->leftJoin('c.reviewer', 'r');

        // search
        if (!empty($search)) {
            $qb->where('c.username LIKE :search')
                ->orWhere('c.tradeName LIKE :search')
                ->orWhere('c.societyName LIKE :search')
                ->orWhere('c.nif LIKE :search')
                ->setParameter('search', '%'.$search.'%');
        }

        // sort by column
        switch($sortColumn) {
            case 0:
                $qb->orderBy('c.username', $sortDirection);
                break;
            case 1:
                $qb->orderBy('c.createdAt', $sortDirection);
                break;
            case 2:
                $qb->orderBy('c.active', $sortDirection);
                beak;
        }

        // group by
        $qb->groupBy('c.id');

        return $qb->getQuery();
    }

    /**
     * Count the total of rows
     *
     * @return int
     */
    public function countTotal()
    {
        $qb = $this->getQueryBuilder()
            ->select('COUNT(c)');

        return $qb->getQuery()
            ->getSingleScalarResult();
    }
    
    private function getQueryBuilder()
    {
        $em = $this->getEntityManager();

        $qb = $em->getRepository('AppBundle:Client')
            ->createQueryBuilder('c');

        return $qb;
    }
}
